# Introduction

The rise of JavaScript frameworks has been on the rise in the past few years. As well as the argument between using a complete framework vs small libraries. This can be demonstrated by looking at all the examples at [TodoMVC](http://todomvc.com/). Each framework/library has their pros and cons and some have become more popular than others. Some of the more popular ones are Angular, Ember, React, BackBone, and Knockout just to name a few. Ractive draws a lot of inspiration from Angular, so much so that it used to be called Anglebars(Angular/Handlebars combination). It is also draws similarties between Knockout as Knockout was one of the first libraries with declarative binding.

Ractive does no parade itself as a complete framework that solves all of your problems but as a library that helps you simplify the interactions between the DOM and your data.

I will not go into a full indepth background and innerworkings of Ractive as it has been already documented well on the [Ractive Blog](http://blog.ractivejs.org/). Including the [origins of Ractive](http://blog.ractivejs.org/posts/the-origins-of-ractive), how Ractive follows the newest [trend of reactive programming](http://blog.ractivejs.org/posts/ractive-js-expressions-and-the-new-wave-of-reactive-programming), and how it [differs/relates to Angular](http://blog.ractivejs.org/posts/whats-the-difference-between-angular-and-ractive). These are all written by [@Rich_Harris](https://twitter.com/Rich_Harris) who is the creator and currently sole contributor to [Ractive](https://github.com/RactiveJS/Ractive).

This book is written for Ractive .40 which is still in beta. This book will likely hold true for awhile as Ractive's API is intended to stay small. This makes Ractive a flexible library and allows you to do things your way while still reaping the benefits of Ractive. Things likely to change would be enhancements to components, decorators, adapators, general concepts, and even additional enhancements to the mustache templates.

The objective of this book is to explain what Ractive offers. Then to move into the concepts section. This will talk about methodologies and the best ways to accomplish things in a performant manner. Then we'll show some examples which will be linked to the various chapters and concepts. 

Always keep in mind that we're explaining things based upon the core concepts of Ractive. Modifying data and how that translates to intelligent updating of the DOM.
